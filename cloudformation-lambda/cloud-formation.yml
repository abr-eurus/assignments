Resources:
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ammar-lambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                Resource: '*'
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt IAMRole.Arn
      FunctionName:
          Ref: LambdaFuncName
      Runtime: nodejs10.x
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async (event, context) => {

              const data = [
                  { id: 100, name: 'ammar rizwan', email: 'ammar@eurustechnologies.com', age: 24, gender: 'male' },
                  { id: 101, name: 'arsam farooq', email: 'arsam@eurustechnologies.com', age: 30, gender: 'male' },
                  { id: 102, name: 'haider ali', email: 'haider@eurustechnologies.com', age: 25, gender: 'male' },
                  { id: 103, name: 'hasnain tahir', email: 'hasnain@eurustechnologies.com', age: 25, gender: 'male' }
              ];
              const response = {
                  statusCode: 200,
                  body: data,
              };
              context.succeed(response);
          };
      Description: Invoke a function to return list of students.
  APIGatewayRestAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ammar-cf-restAPI
      Description: A test API
      EndpointConfiguration:
        Types:
          - REGIONAL
    DependsOn:
      - LambdaFunction
  APIGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ParentId: !GetAtt
        - APIGatewayRestAPI
        - RootResourceId
      PathPart: abc
    DependsOn:
      - APIGatewayRestAPI
  APIGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !Ref APIGatewayResource
      HttpMethod: GET
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
      Integration:
        Type: AWS
        IntegrationResponses:
          - StatusCode: 200
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations"
    DependsOn:
      - APIGatewayResource
  APIGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      StageName: ammar-cf-prod
    DependsOn:
      - APIGatewayMethod
  APIGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGatewayRestAPI}/*/GET/abc"
    DependsOn:
      - APIGatewayDeployment

Parameters:
  LambdaFuncName:
    Type: String
    Default: ammar-getList


Outputs:
  LambdaFunctionArn:
    Value: !GetAtt LambdaFunction.Arn
